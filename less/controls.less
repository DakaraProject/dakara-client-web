/**
 * Dakara project
 *
 * Controls style file
 */

/* Provides:

`controls` class.
`make-controls` function.

*/

/* `controls` class:

The `controls` class is a manager for buttons, i.e. controls, which change feel
and color depending on hover and activation. If contained in a `listing-entry`
class line, they also depend on their parent hover and alteration. The class
does not set the size of the controls, this is performed by the `make-controls`
function.

It provides a `control` subclass for those elements, which has the basic
properties. Extra subclasses are available for the color of the control.

*/

.controls {
    // maybe not necessary
    display: flex;

    .control {
        cursor: pointer;
        text-align: center;
        color: @text-dark;

        &:not(:first-child) {
            margin-left: @gap-horizontal;
        }

        img {
            vertical-align: middle;
        }

        .make-control(@color-enabled, @color-disabled, @color-activated) {
            background: @color-enabled;

            &.disabled {
                background: @color-disabled;
                cursor: default;
            }

            &:not(.disabled):hover {
                background: @color-activated !important;
            }
        }

        &.primary{
            .make-control(@brand-primary, @brand-primary-dark, @brand-primary-lighter);
        }

        &.success{
            .make-control(@brand-success, @brand-success-dark, @brand-success-lighter);
        }

        &.warning{
            .make-control(@brand-warning, @brand-warning-dark, @brand-warning-lighter);
        }

        &.danger{
            .make-control(@brand-danger, @brand-danger-dark, @brand-danger-lighter);
        }

        &.info{
            .make-control(@brand-info, @brand-info-dark, @brand-info-lighter);
        }
    }
}

// lighten control on even line of a `listing` list
.listing-entry:nth-child(even) .controls:not(.subcontrols),
.sublisting-entry:nth-child(even) .controls.subcontrols {
// .listing-entry:nth-child(even) .controls {
    .control {
        .make-control-line-even(@color-normal, @color-disabled) {
            background: @color-normal;

            &.disabled {
                background: @color-disabled;
            }
        }

        &.primary {
            .make-control-line-even(@brand-primary-light, @brand-primary-darkened);
        }

        &.success {
            .make-control-line-even(@brand-success-light, @brand-success-darkened);
        }

        &.warning {
            .make-control-line-even(@brand-warning-light, @brand-warning-darkened);
        }

        &.danger {
            .make-control-line-even(@brand-danger-light, @brand-danger-darkened);
        }

        &.info {
            .make-control-line-even(@brand-info-light, @brand-info-darkened);
        }
    }
}

// lighten control when line hovered on a list
.hoverizable:hover .controls {
    .control {
        .make-control-line-hover(@color-normal, @color-disabled) {
            &:not(.disabled) {
                background: @color-normal;
            }

            &.disabled {
                background: @color-disabled;
            }
        }

        &.primary {
            .make-control-line-hover(@brand-primary-lighter, @brand-primary-darkish);
        }

        &.success {
            .make-control-line-hover(@brand-success-lighter, @brand-success-darkish);
        }

        &.warning {
            .make-control-line-hover(@brand-warning-lighter, @brand-warning-darkish);
        }

        &.danger {
            .make-control-line-hover(@brand-danger-lighter, @brand-danger-darkish);
        }

        &.info {
            .make-control-line-hover(@brand-info-lighter, @brand-info-darkish);
        }
    }
}

/* `make-controls` function:

The function has to be called wherever a `controls` class is used. It defines
the size of the controls.

*/

.make-controls(@height, @font-size: 1em) {
    .control {
        .square(@height);
        line-height: @height;
        font-size: @font-size;
    }
}
