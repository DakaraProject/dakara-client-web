//
// Dakara Project
//
// Sizes style file
//

@use "~/abstracts/support";

// gap sizes
$gap-horizontal: 1.5rem;
$gap-vertical: 2 * $gap-horizontal;

$gap-horizontal-smartphone: 0.5 * $gap-horizontal;
$gap-vertical-smartphone: 0.5 * $gap-vertical;

// page sizes
$page-width-max: 96.1rem;

// row sizes
$row-height: 5rem;
$row-icon-font-size: 1.5em;

// subrow sizes
$subrow-height: 0.75 * $row-height;
$subrow-icon-font-size: 0.85 * $row-icon-font-size;

// helper for padding or margin gaps
// @param $type property to use (padding or margin)
// @param $direction where to apply the gap (top, bottom, left, right, vertical
//  (top and bottom) or horizontal (left and right))
// @param $factor extra scale to apply to the gap (number)
@mixin make-gap($type, $direction, $factor: 1) {
    // detect if the gap has to be applied to one axis or one direction only
    $is-multi: ($direction == vertical) or ($direction == horizontal);

    // format the value accordingly
    // for large device
    $value: null;
    @if $is-multi {
        @if $direction == vertical {
            $value: $gap-vertical * $factor 0;
        } @else {
            $value: 0 $gap-horizontal * $factor;
        }
    } @else {
        @if ($direction == top) or ($direction == bottom) {
            $value: $gap-vertical * $factor;
        } @else if ($direction == right) or ($direction == left) {
            $value: $gap-horizontal * $factor;
        } @else {
            @error "direction must be either vertical, horizontal, top, bottom, left or right";
        }
    }

    // for smartphone
    $value-smartphone: null;
    @if $is-multi {
        @if $direction == vertical {
            $value-smartphone: $gap-vertical-smartphone * $factor 0;
        } @else {
            $value-smartphone: 0 $gap-horizontal-smartphone * $factor;
        }
    } @else {
        @if ($direction == top) or ($direction == bottom) {
            $value-smartphone: $gap-vertical-smartphone * $factor;
        } @else if ($direction == right) or ($direction == left) {
            $value-smartphone: $gap-horizontal-smartphone * $factor;
        } @else {
            @error "direction must be either vertical, horizontal, top, bottom, left or right";
        }
    }

    // create the property name accordingly
    $property: null;
    @if $is-multi {
        $property: $type;
    } @else {
        $property: "#{$type}-#{$direction}";
    }

    // apply the rule
    & {
        #{$property}: $value;
    }

    @include support.make-smartphone {
        #{$property}: $value-smartphone;
    }
}

// add a special vertical padding that is tiny enough to not mess with the
// vertical centering, and large enough to keep the content away from borders
// when it spreads on several lines
// @param $extra when set to horizontal, apply a normal horizontal gap too
// @param $factor extra scale to apply to the vertical padding (number)
@mixin make-vertical-row-padding($extra: none, $factor: 1) {
    padding-bottom: calc(($gap-horizontal / 4) * $factor);
    padding-top: calc(($gap-horizontal / 4) * $factor);

    @include support.make-smartphone {
        padding-bottom: calc(($gap-horizontal-smartphone / 3) * $factor);
        padding-top: calc(($gap-horizontal-smartphone / 3) * $factor);
    }

    // apply extra horizontal gap if necessary
    @if $extra == horizontal {
        @include make-gap(padding, right);
        @include make-gap(padding, left);
    }
}

@mixin make-reverse() {
    flex-direction: row-reverse;

    .work-link-item:last-child {
        margin-right: 0.5em;
    }

    .work-link-item:first-child {
        margin-right: 0;
    }
}
