//
// Dakara Project
//
// Player style file
//


// player sizes
$player-controls-height: 6rem;
$player-controls-height-smartphone: $row-height;
$player-timing-height: 6rem;
$player-progressbar-height: 0.4rem;


// `player` id:
//
// This component stylizes the player, containing controls, song info and a
// progression bar.
#player {
    background: $brand-primary-darker;
    color: $brand-primary;
    position: sticky;
    top: 0;

    @include make-smartphone {
        top: 0;
    }

    // if the player has controls activated, the player-sticky item will hide
    // the controls item on scroll
    &.with-controls {
        top: -$player-controls-height - $gap-vertical;

        @include make-smartphone {
            top: -$player-controls-height-smartphone - $gap-vertical-smartphone;
        }
    }

    .player-sticky {
        @include make-gap(padding, vertical);

        background: $brand-primary-darker;
        position: sticky;
        top: 0;
        z-index: 1100;
    }

    // `playlist-entry` class: container for the current playlist entry.
    .playlist-entry {
        display: flex;
        overflow: hidden;

        // `use-instrumental` subclass: indicate if the playlist entry use the instrumental track.
        .use-instrumental {
            @include make-gap(padding, left);

            font-size: 1.45em;
            line-height: 1.5;
        }

        // `entry-info` sublcass: show info about the playlist entry (song + playing request)
        .entry-info {
            @include make-gap(margin, horizontal);

            overflow: hidden;

            // `song` subclass: the song itself.
            .song {
                overflow: hidden;

                // remove special colors of disabled songs
                &.disabled {
                    background-color: unset;
                    color: inherit;
                }

                .general {
                    align-items: initial;
                    flex-direction: column;
                }

                .header {
                    flex-grow: initial;
                    font-size: 1.5em;
                    font-weight: 300;

                    // .title {
                    // }

                    // .version {
                    // }
                }

                .artist-work {
                    margin: 0;

                    .artists {
                        text-align: left;
                    }

                    .work-link {
                        @include make-reverse();

                        .link {
                            border-color: shade($brand-primary, 25%);
                        }
                    }
                }
            }

            // `playlist-entry-owner` subclass: owner of the playlist entry.
            .owner {
                overflow: hidden;

                .user-widget {
                    @include text-truncate();

                    .icon {
                        font-size: 1em;
                    }
                }
            }
        }

        // `timing` subclass: display current timing over expected duration.
        .timing {
            @mixin make-timing($ratio-timing) {
                $height-timing: $player-timing-height;

                .current {
                    font-size: $height-timing * $ratio-timing;
                    line-height: $height-timing * $ratio-timing;
                }

                .duration {
                    font-size: $height-timing * (1 - $ratio-timing);
                    line-height: $height-timing * (1 - $ratio-timing);
                }
            }

            @include make-gap(margin, right);
            @include make-timing(0.7);

            // shrink the timing class element first when resizing, up to
            // the width of the duration (4 digits plus one colon)
            flex: 1;
            font-feature-settings: "tnum";
            min-width: max-content;
            overflow: hidden;
            text-align: right;

            @include make-smartphone {
                @include make-timing(0.7);
            }

            .current {
                font-weight: 100;
            }

            .duration {
                opacity: 0.85;
            }
        }
    }

    // `controls` class: buttons to send commands to the player.
    .controls {
        @include make-gap(padding, bottom);
        @include make-controls($player-controls-height, 1.5em);

        align-items: center;
        display: flex;

        @include make-smartphone {
            @include make-controls($player-controls-height-smartphone, 1.1em);
        }

        &.expand-enter {
            max-height: 0;
            overflow-y: hidden;

            &.expand-enter-active {
                max-height: $player-controls-height;
                transition: max-height 300ms ease-out;

                @include make-smartphone {
                    max-height: $row-height;
                }
            }
        }

        &.expand-exit {
            max-height: $player-controls-height;
            overflow-y: hidden;

            @include make-smartphone {
                max-height: $row-height;
            }

            &.expand-exit-active {
                max-height: 0;
                transition: max-height 150ms ease-out;
            }
        }

        .control {
            overflow: hidden;
            position: relative;

            &.managed-error .managed.managed-enter {
                left: -100%;
            }

            .managed {
                align-items: center;
                display: flex;
                height: 100%;
                justify-content: center;
                left: 0;
                position: absolute;
                top: 0;
                width: 100%;

                // appearance transition
                &.managed-enter {
                    left: 100%;

                    &.managed-enter-active {
                        left: 0;
                        transition: left 150ms ease-out;
                    }
                }

                // appearance transition
                &.managed-exit {
                    left: 0;

                    &.managed-exit-active {
                        left: -100%;
                        transition: left 150ms ease-out;
                    }
                }
            }
        }
    }

    // // `first-line` class: the main part of the player displays the current
    // // song, its numerical progression and the controls of the player.
    // .first-line {
    //     @include make-gap(padding, vertical);
    //
    //     align-items: center;
    //     display: flex;
    //
    //     .display-area {
    //         @include make-gap(margin, left);
    //
    //         height: $player-controls-height;
    //         overflow: hidden;
    //         width: 100%;
    //
    //     }
    // }

    // `progressbar` class: visual indicator of the song progression.
    .progressbar {
        // reset default style
        appearance: none;
        border-style: none;
        display: block;
        height: $player-progressbar-height;
        width: 100%;

        &[value] {
            @mixin make-bar() {
                background: transparent;
            }

            @mixin make-value() {
                background: $brand-primary-dark;
            }

            & {
                // for firefox and ie
                @include make-bar();
            }

            & {
                // for ie
                color: $brand-primary-dark;
            }

            &::-moz-progress-bar {
                // for firefox
                @include make-value();
            }

            &::-webkit-progress-bar {
                // for webkit
                @include make-bar();
            }

            &::-webkit-progress-value {
                // for webkit
                @include make-value();
            }

            // fallback styling
            .bar {
                @include make-bar();

                .value {
                    @include make-value();
                    height: 100%;
                }
            }
        }

        &:not([value]),
        &:indeterminate {
            @mixin make-bar() {
                animation: sliding-animation 1s linear infinite;
                background: repeating-linear-gradient(
                    -45deg,
                    $brand-primary-dark,
                    $brand-primary-dark 2rem,
                    $brand-primary-darker 2rem,
                    $brand-primary-darker 4rem
                );
            }

            & {
                // for firefox and ie
                @include make-bar();
            }

            @keyframes sliding-animation {
                to {
                    background-position-x: 1.41421356 * 4rem;
                }
            }

            &::-webkit-progress-bar {
                // for webkit
                // it does not seem to work for now
                @include make-bar();
            }

            // firefox considers that the bar is at 100%
            &::-moz-progress-bar {
                background: transparent;
            }
        }
    }
}
