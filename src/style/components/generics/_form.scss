//
// Dakara Project
//
// Forms style file
//

@use 'sass:color';

@use '~/thirdparty/preboot';

@use '~/abstracts/colors';
@use '~/abstracts/controls';
@use '~/abstracts/fonts';
@use '~/abstracts/sizes';
@use '~/abstracts/support';

// form sizes
$form-field-height: sizes.$row-height;

// `form` class:
//
// This class provides tools to create forms in the project. Forms come in two
// ways: as block forms (common forms, for several fields, one per line) and as
// inline forms (for one line). In each case, inputs will take all the
// horizontal space at their disposal.
//
// It is important to keep in mind that forms are a moot point in CSS, as the
// standard does not specify how to style `input`s. If some porperties work on
// them, it is purely browser dependent, and not all of them are supported.
// Sources:
//     https://www.w3.org/TR/CSS21/conform.html#conformance
//     https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element
//
// Because of this, input tags are wrapped into `input` class. Inputs can be
// faked with the `input.fake` class: in this case, the `input` class looks
// like the input tag. The corresponding input tag must have the class `faked`
// to appear colorless. Focus cannot be handled by native CSS in this case, you
// have to use some JS with the `onFocus` and `onBlur` events of the faked
// input.
.form {
  $field-height: $form-field-height;

  // `block` subclass:
  //
  // The `block` subclass is appropriate for large forms involving several
  // fields. It contains a `header`, a `set` of input fiels, and `controls`.
  // The `header` is optional and can contain the form title. It has no
  // color. The `set` contains `field`s, which are couples of `label` and
  // `input`. Labels can be a single icon (combined with a placeholder in the
  // input tag), an icon and a text or a single text. As you wish. On desktop
  // view, labels are displayed in a column style: their width is adjusted
  // along the largest element. On mobile view, labels and input are on a
  // separate line. Each field row has a gap with the next one. A gap is
  // added between the `header` and the `set` if they follow each other
  // immediately. The `controls` block contains buttons of the form (to
  // submit it, reset it, etc.). Buttons are of primary color. The `controls`
  // space is used to display notifications of the form submission.
  //
  // Example with title:
  // +-------------------+
  // | Title             |
  // |                   |
  // | Label      Input__|
  // |                   |
  // | Long label Input__|
  // |                   |
  // |          Controls |
  // +-------------------+
  //
  // Example without title:
  // +-------------------+
  // | Label      Input__|
  // |                   |
  // | Long label Input__|
  // |                   |
  // |          Controls |
  // +-------------------+
  &.block {
    // `set` class: the set contains the fields of the form.
    .set {
      // this rule removes the space at the top of the set due to
      // `border-spacing`, but the rule is cancelled if there is a header
      // just before
      @include sizes.make-gap(margin, top, -1);

      & {
        border-collapse: separate;
        border-spacing: 0 sizes.$gap-vertical;
        display: table;
        width: 100%;
      }

      @include support.make-smartphone {
        border-spacing: 0 sizes.$gap-vertical-smartphone;
      }

      // The field contains a label and an input.
      .field {
        display: table-row;

        .label {
          & {
            // this allows to shrink the label 'column' as small as
            // possible
            display: table-cell;
          }

          @include support.make-smartphone {
            display: block;
          }

          & {
            // this allows to align in the middle if the field is
            // one line height (typical `input`) and align on the
            // top for several lines (typical `textarea`)
            line-height: $field-height;
            vertical-align: top;
          }

          & {
            // this allows the shrink to be exactly the length of
            // the label, but since the label is now un-breakable,
            // it *must* be kept short
            white-space: nowrap;
          }

          // if label is empty, do not add padding
          &:not(:empty) {
            @include sizes.make-gap(padding, horizontal);
          }

          .icon {
            font-size: 1.5em;
          }

          // if an icon and a name are set
          .icon + .name,
          .name + .icon {
            margin-left: 0.5em;
          }
        }

        // We cannot directly use `display: table-cell` on an input tag
        // because this property seems to be not supported.
        // We have to use a wrapper instead.
        // Source: http://stackoverflow.com/a/15632230
        .input {
          display: table-cell;
          width: 100%;

          @include support.make-smartphone {
            display: block;
          }

          .error-container {
            .error {
              padding: sizes.$gap-vertical * 0.25;
            }

            &.error-container-enter {
              max-height: 0;

              &.error-container-enter-active {
                max-height: calc(1em + #{sizes.$gap-vertical} * 2);
                transition: max-height 300ms ease-out;
              }
            }

            // notification transition disappearance
            &.error-container-exit {
              max-height: calc(1em + #{sizes.$gap-vertical} * 2);

              &.error-container-exit-active {
                max-height: 0;
                transition: max-height 100ms ease-out;
              }
            }
          }
        }
      }
    }

    // `controls` subclass: buttons of the form.
    .controls {
      @include controls.make-controls($height: $field-height);

      display: flex;
      justify-content: flex-end;

      .control {
        @include sizes.make-gap(padding, horizontal);
      }
    }

    // `header` class: header of the form.
    > .header {
      h3 {
        @include sizes.make-gap(padding, horizontal);
      }
    }

    // if the set is preceded by a header
    > .header + .set {
      margin-top: 0;
    }
  }

  // `inline` subclass:
  //
  // The `inline` subclass is appropriate for single-field forms. This
  // subclass supports neither labels, nor titles, nor notifications. Use it
  // for simple forms involving GET requests.
  //
  // Example:
  // +-------------------+
  // | Input    Controls |
  // +-------------------+
  &.inline {
    display: flex;

    // `set` class: the set contains the inputs of the form.
    .set {
      @include sizes.make-gap(padding, right);

      & {
        display: flex;
        flex: 1;
      }

      .input {
        flex: initial;

        &:not(:last-child) {
          @include sizes.make-gap(margin, right);
        }
      }
    }

    // `controls` subclass: buttons of the form
    .controls {
      @include controls.make-controls($height: $field-height);
    }
  }

  // `field` class:
  //
  // This section handles the style of the fields input. Fields are rendered
  // the same way wether they belong to a block form or an inline form.
  //
  // Rules are groupped by fierd type.
  .field {
    // general tags and classes:
    //
    // Visual aspect of the inputs and faked inputs of any kind.
    input,
    textarea,
    select,
    .fake {
      // reset style
      border-style: none;
      box-sizing: border-box;
      outline: none;

      &:required {
        border-style: none;
        box-shadow: none;
        outline: none;
      }

      // give an appareance
      &:not(.faked) {
        @include sizes.make-gap(padding, horizontal);

        & {
          background: colors.$neutral-300;
        }

        &:focus,
        &.focus,
        &[type='checkbox']:focus + .marker {
          background: colors.$neutral-303;
        }
      }

      // spread all possible width
      &:not([type='checkbox']) {
        width: 100%;

        & {
          // remove the limitation for Firefox
          min-width: 0;
        }
      }
    }

    &.disabled {
      input,
      textarea,
      select,
      .fake {
        &:not(.faked) {
          background: colors.$neutral-200;
        }
      }
    }

    input,
    .fake {
      display: block;
      height: $field-height;
    }

    // faked input
    input.faked {
      background: none;
      padding: 0;
    }

    // field hover
    &:not(.disabled):hover {
      input,
      textarea,
      select,
      .fake:not(.group) {
        &:not(:focus):not(.focus) {
          background: colors.$neutral-302;
        }
      }
    }

    // transparent controls inside inputs
    .input .controls .control {
      color: colors.$neutral-000;
      // no margin when stacking controls
      margin: 0;

      &:hover:not(:focus) {
        // XXX wrong color
        color: colors.$neutral-122;
      }

      &:focus {
        // XXX wrong color
        color: colors.$neutral-122;
      }
    }

    // `text-input` class:
    //
    // Text/number input and textarea.
    .text-input {
      input,
      textarea {
        color: colors.$neutral-000;

        &::placeholder {
          color: colors.$neutral-100;
        }

        & {
          // Some browsers (Firefox) try to use system fonts
          @include fonts.make-text;

          font-size: medium;
        }
      }

      textarea {
        // this simulates the correct space of single line `input`, but
        // is pretty approximative
        min-height: 3 * $field-height;
        padding-bottom: calc(0.5 * #{$field-height} - 0.65em);
        padding-top: calc(0.5 * #{$field-height} - 0.65em);
        resize: vertical;
      }
    }

    // `select-input` class:
    //
    // Select field, can be of type `multiple` or not.
    .select-input {
      position: relative;

      select {
        // fix font properties
        // remove the marker
        appearance: none;
        color: colors.$neutral-000;
        font-size: medium;

        &:not(:disabled) {
          cursor: pointer;
        }

        // fix height which is minimal by default
        &:not([multiple]) {
          height: $field-height;
        }

        // height for select of type multiple
        &[multiple] {
          min-height: $field-height;
        }

        & {
          // Firefox adds an ugly triangle that can't be stylized
          // here is a hack: https://gist.github.com/joaocunha/6273016/
          text-indent: 0.01px;
          text-overflow: '';
        }

        // add space for marker
        &:not([multiple]) {
          padding-right: $field-height;
        }

        &[multiple] {
          @include sizes.make-gap(padding, horizontal);
        }
      }

      // create the marker
      &:not(.multiple)::after {
        // square shape
        @include preboot.square($field-height);

        // attached to the top right
        // no pointer effect
        color: colors.$neutral-000;
        content: '▼';
        font-size: 1.5em;
        line-height: $field-height;
        pointer-events: none;
        position: absolute;
        right: 0;
        text-align: center;
        top: 0;
      }
    }

    // `radio-input` class:
    //
    // A set of radio buttons.
    .radio-input {
      input[type='radio'] {
        // delete initial marker
        // reset initial height
        appearance: none;
        position: absolute;
        height: initial;
        width: 0;
      }

      // add style to adjacent marker box
      input + label.marker {
        @include preboot.square($field-height * 0.5);

        // remove padding
        margin-top: $field-height * 0.25;
        padding: 0;
        position: relative;
      }

      // add style to marker when checked
      input:checked + label.marker::after {
        @include preboot.square($field-height * 0.3);

        background: colors.$neutral-000;
        border-radius: 50%;
        content: '';
        left: $field-height * 0.1;
        position: absolute;
        top: $field-height * 0.1;
      }

      .radio-option {
        display: flex;
        line-height: $field-height;

        .description {
          @include sizes.make-gap(padding, horizontal);

          & {
            flex: 1;
          }

          &.long {
            @include fonts.make-long;

            line-height: normal;
            padding: calc(#{$field-height * 0.5} - 0.7em) sizes.$gap-horizontal;

            @include support.make-smartphone {
              padding: calc(#{$field-height * 0.5} - 0.7em)
                sizes.$gap-horizontal-smartphone;
            }
          }
        }
      }
    }

    &:not(.disabled) {
      // handle cursor
      .radio-input {
        label {
          &.marker,
          &.description {
            cursor: pointer;
          }
        }
      }

      // handle hover
      .label:hover + .input .radio-input:not(:hover),
      .radio-input:hover .radio-option:hover {
        input[type='radio']:not(:focus) + label.marker {
          background: colors.$neutral-302;
        }
      }
    }

    // `checkbox-input` and `toggle-input` classes:
    //
    // Rules for the same input of type `checkbox`, but with two different
    // styles.
    .checkbox-input,
    .toggle-input {
      input[type='checkbox'] {
        // delete initial marker
        // reset initial height
        appearance: none;
        height: initial;
        width: 0;

        & {
          // hack for old browsers (Firefox 52), for which
          // deactivating appareance is not enough
          // TODO make it conditionnal?
          opacity: 0;
          position: absolute;
        }
      }
    }

    // specific style for checkbox
    .checkbox-input {
      // add style to adjacent marker box
      input + label.marker {
        @include preboot.square($field-height * 0.5);

        // remove padding
        margin-top: $field-height * 0.25;
        padding: 0;
        position: relative;
      }

      // add style to marker when checked
      input:checked + label.marker::after {
        @include preboot.square($field-height * 0.3);

        background: colors.$neutral-000;
        clip-path: polygon(
          0% 0%,
          30% 0%,
          50% 20%,
          70% 0%,
          100% 0%,
          100% 30%,
          80% 50%,
          100% 70%,
          100% 100%,
          70% 100%,
          50% 80%,
          30% 100%,
          0% 100%,
          0% 70%,
          20% 50%,
          0% 30%
        );
        content: '';
        left: $field-height * 0.1;
        position: absolute;
        top: $field-height * 0.1;
      }
    }

    .toggle-input,
    .checkbox-input,
    .radio-input {
      input + label.marker {
        overflow: hidden;
      }

      // add second marker
      input + label.marker::before {
        background: colors.$primary-300;
        content: '';
        height: $field-height * 0.5;
        position: absolute;
        right: $field-height * 0.5;
        width: $field-height * 0.5;
      }

      input:disabled + label.marker::before {
        background: colors.$primary-200;
      }

      // add style to second marker when not checked
      input:not(:checked) + label.marker::before {
        right: $field-height * 0.5;
        transition: right 150ms ease-out;
      }

      // add style to second marker when checked
      input:checked + label.marker::before {
        right: 0;
        transition: right 150ms ease-out;
        transition-delay: 150ms;
      }
    }

    // specific style for toggle
    .toggle-input {
      // add style to adjacent marker box
      input + label.marker {
        // remove padding
        height: $field-height * 0.5;
        margin-top: $field-height * 0.25;
        padding: 0;
        position: relative;
        width: $field-height;
      }

      // add marker
      input + label.marker::after {
        @include preboot.square($field-height * 0.3);

        background: colors.$neutral-000;
        content: '';
        left: $field-height * 0.1;
        position: absolute;
        top: $field-height * 0.1;
      }

      // add style to marker when not checked
      input:not(:checked) + label.marker::after {
        left: $field-height * 0.1;
        transition: left 150ms ease-out;
        transition-delay: 150ms;
      }

      // add style to marker when checked
      input:checked + label.marker::after {
        left: $field-height * 0.6;
        transition: left 150ms ease-out;
      }

      // size of the second marker
      input + label.marker::before {
        height: $field-height * 0.5;
        right: $field-height;
        width: $field-height;
      }

      // size of the second marker when not checked
      input:not(:checked) + label.marker::before {
        right: $field-height;
      }
    }

    &:not(.disabled) {
      // handle cursor
      .checkbox-input,
      .toggle-input,
      .radio-input {
        label.marker {
          cursor: pointer;
        }
      }

      // handle hover
      .label:hover + .input .toggle-input input,
      .label:hover + .input .checkbox-input input,
      .label:hover + .input .radio-input input,
      .toggle-input input:hover,
      .checkbox-input input:hover,
      .radio-input input:hover {
        &:not(:focus) + label.marker::before {
          background: colors.$primary-302;
        }
      }

      // handle focus
      .toggle-input input:focus + label.marker::before,
      .checkbox-input input:focus + label.marker::before,
      .radio-input input:focus + label.marker::before {
        background: colors.$primary-303;
      }
    }

    // `hue-input` class:
    //
    // The hue field is a specific kind of the range field.
    .hue-input {
      display: flex;

      .preview {
        background: colors.$placeholder-300;
        color: colors.$placeholder-000;
        flex-shrink: 0;
        font-size: medium;
        font-weight: 700;
        line-height: $form-field-height;
        text-align: center;
        width: $form-field-height;

        &:has(+ .input input:disabled) {
          background: colors.$placeholder-200;
        }

        &::selection {
          background: colors.$placeholder-200;
          color: colors.$placeholder-500;
        }
      }

      .input {
        $track-height: 0.5rem;

        input[type='range'] {
          appearance: none;
          background: transparent;
          height: 100%;

          // use of custom selectors `::range-*` via postcss-input-range

          &::range-track {
            // make the placeholder color a bit darker because the result is
            // different compared to the colors given by `hue-rotate`
            $color: color.scale(colors.$placeholder-300, $lightness: -20%);

            background: linear-gradient(
              in hsl longer hue to right,
              $color 0% 100%
            );
            height: $track-height;
          }

          &::range-thumb {
            @include preboot.square($track-height);

            // fix for Chrome
            appearance: none;
            background: colors.$neutral-000;
            border: $track-height solid colors.$neutral-000;
            // fix for Firefox
            border-radius: 0;
            box-sizing: content-box;
            // fix for Chrome to center the thumb vertically
            // (thumb size - track size) * -0.5
            margin-top: -$track-height;
          }
        }
      }
    }

    &:not(.disabled) {
      .hue-input {
        input[type='range'] {
          cursor: pointer;

          // use of custom selectors `::range-*` via postcss-input-range

          &:focus::range-thumb {
            background: transparent;
          }
        }
      }
    }
  }
}
