//
// Dakara Project
//
// Controls style file
//

@use '~/abstracts/colors';
@use '~/abstracts/controls';
@use '~/abstracts/sizes';

// `controls` class:
//
// The `controls` class is a manager for buttons, i.e. controls, which change
// feel and color depending on hover and activation. If contained in a
// `listing-entry` class line, they also depend on their parent hover and
// alteration. The class does not set the size of the controls, this is
// performed by the `make-controls` function.
//
// It provides a `control` subclass for those elements, which has the basic
// properties. Extra subclasses are available for the color of the control.
.controls {
  display: flex;

  > .subcontrols {
    display: flex;
  }

  // subclass for a control button
  .control {
    align-items: center;
    border-style: none;
    color: colors.$text-dark;
    cursor: pointer;
    display: flex;
    justify-content: center;
    outline: none;
    padding: 0;

    // spacing between controls
    &:not(:last-child) {
      @include sizes.make-gap(margin, right);
    }

    // if the control contains a picture, it is vertically centered
    img {
      vertical-align: middle;
    }

    // maker for different type of control buttons
    @mixin make-control(
      $color-enabled,
      $color-disabled,
      $color-hover,
      $color-focus: $color-hover
    ) {
      background: $color-enabled;

      &.disabled,
      &[disabled] {
        background: $color-disabled;
        cursor: default;
      }

      &:not(.disabled):not([disabled]) {
        &:hover:not(:focus) {
          background: $color-hover;
        }

        &:focus {
          background: $color-focus;
        }
      }
    }

    &.primary {
      @include make-control(
        colors.$primary-300,
        colors.$primary-200,
        colors.$primary-320
      );
    }

    &.success {
      @include make-control(
        colors.$success-300,
        colors.$success-200,
        colors.$success-320
      );
    }

    &.warning {
      @include make-control(
        colors.$warning-300,
        colors.$warning-200,
        colors.$warning-320
      );
    }

    &.danger {
      @include make-control(
        colors.$danger-300,
        colors.$danger-200,
        colors.$danger-320
      );
    }

    &.info {
      @include make-control(
        colors.$info-300,
        colors.$info-200,
        colors.$info-320
      );
    }
  }

  // make link transparent
  a.control {
    text-decoration: none;
  }
}

// lighten control on even line of a `listing` list
.listing-entry:nth-child(even) .controls:not(.subcontrols),
.sublisting-entry:nth-child(even) .controls.subcontrols {
  .control {
    @mixin make-control-line-even($color-normal, $color-disabled) {
      &:not(:hover):not(:focus) {
        background: $color-normal;
      }

      &.disabled,
      &[disabled] {
        background: $color-disabled;
      }
    }

    &.primary {
      @include make-control-line-even(colors.$primary-310, colors.$primary-210);
    }

    &.success {
      @include make-control-line-even(colors.$success-310, colors.$success-210);
    }

    &.warning {
      @include make-control-line-even(colors.$warning-310, colors.$warning-210);
    }

    &.danger {
      @include make-control-line-even(colors.$danger-310, colors.$danger-210);
    }

    &.info {
      @include make-control-line-even(colors.$info-310, colors.$info-210);
    }
  }
}

// lighten control when line hovered on a list
.hoverizable:hover .controls:not(:hover) {
  .control {
    @mixin make-control-line-hover($color-normal, $color-disabled) {
      &:not(.disabled):not([disabled]):not(:focus) {
        background: $color-normal;
      }

      &.disabled,
      &[disabled] {
        background: $color-disabled !important;
      }
    }

    &.primary {
      @include make-control-line-hover(
        colors.$primary-320,
        colors.$primary-220
      );
    }

    &.success {
      @include make-control-line-hover(
        colors.$success-320,
        colors.$success-220
      );
    }

    &.warning {
      @include make-control-line-hover(
        colors.$warning-320,
        colors.$warning-220
      );
    }

    &.danger {
      @include make-control-line-hover(colors.$danger-320, colors.$danger-220);
    }

    &.info {
      @include make-control-line-hover(colors.$info-320, colors.$info-220);
    }
  }
}

.controls-col {
  .controls {
    height: 100%;
    justify-content: flex-end;
  }
}
