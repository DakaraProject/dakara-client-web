//
// Dakara Project
//
// Controls style file
//


// `make-controls` function:
//
// The function has to be called wherever a `controls` class is used. It defines
// the size of the controls.
//
// Arguments:
//      @height: heigth and width of the control box.
//      @font-size: relative size of the text in the control.
//      @icon-size: relative size of the icon of the control. This value is made
//          independant of @font-size.
.make-controls(@height, @font-size: 1em, @icon-size: @font-size) {
    > .control {
        .square(@height);
        line-height: @height;
        font-size: @font-size;

        .icon {
            @size: @icon-size / @font-size;
            font-size: @size;
        }
    }
}


// `controls` class:
//
// The `controls` class is a manager for buttons, i.e. controls, which change
// feel and color depending on hover and activation. If contained in a
// `listing-entry` class line, they also depend on their parent hover and
// alteration. The class does not set the size of the controls, this is
// performed by the `make-controls` function.
//
// It provides a `control` subclass for those elements, which has the basic
// properties. Extra subclasses are available for the color of the control.
.controls {
    // maybe not necessary
    display: flex;

    // subclass for a control button
    .control {
        display: block;
        cursor: pointer;
        text-align: center;
        color: @text-dark;
        border: none;
        outline: none;
        padding: 0;

        // spacing between controls
        &:not(:first-child) {
            margin-left: @gap-horizontal;
        }

        // if the control contains a picture, it is vertically centered
        img {
            vertical-align: middle;
        }

        // maker for different type of control buttons
        .make-control(@color-enabled, @color-disabled, @color-activated) {
            background: @color-enabled;

            &.disabled,
            &[disabled] {
                background: @color-disabled;
                cursor: default;
            }

            // this rule is weaker than the rule for even lines, so it
            // has to be enforced manually
            &:not(.disabled):not([disabled]):hover,
            &:not(.disabled):not([disabled]):focus {
                background: @color-activated !important;
            }
        }

        &.primary{
            .make-control(@brand-primary, @brand-primary-dark, @brand-primary-lighter);
        }

        &.success{
            .make-control(@brand-success, @brand-success-dark, @brand-success-lighter);
        }

        &.warning{
            .make-control(@brand-warning, @brand-warning-dark, @brand-warning-lighter);
        }

        &.danger{
            .make-control(@brand-danger, @brand-danger-dark, @brand-danger-lighter);
        }

        &.info{
            .make-control(@brand-info, @brand-info-dark, @brand-info-lighter);
        }
    }
}


// lighten control on even line of a `listing` list
.listing-entry:nth-child(even) .controls:not(.subcontrols),
.sublisting-entry:nth-child(even) .controls.subcontrols {
    .control {
        .make-control-line-even(@color-normal, @color-disabled) {
            background: @color-normal;

            &.disabled,
            &[disabled] {
                background: @color-disabled;
            }
        }

        &.primary {
            .make-control-line-even(@brand-primary-light, @brand-primary-darkened);
        }

        &.success {
            .make-control-line-even(@brand-success-light, @brand-success-darkened);
        }

        &.warning {
            .make-control-line-even(@brand-warning-light, @brand-warning-darkened);
        }

        &.danger {
            .make-control-line-even(@brand-danger-light, @brand-danger-darkened);
        }

        &.info {
            .make-control-line-even(@brand-info-light, @brand-info-darkened);
        }
    }
}


// lighten control when line hovered on a list
.hoverizable:hover .controls,
.hoverizable:focus .controls {
    .control {
        .make-control-line-hover(@color-normal, @color-disabled) {
            &:not(.disabled):not([disabled]) {
                background: @color-normal;
            }

            &.disabled,
            &[disabled] {
                background: @color-disabled !important;
            }
        }

        &.primary {
            .make-control-line-hover(@brand-primary-lighter, @brand-primary-darkish);
        }

        &.success {
            .make-control-line-hover(@brand-success-lighter, @brand-success-darkish);
        }

        &.warning {
            .make-control-line-hover(@brand-warning-lighter, @brand-warning-darkish);
        }

        &.danger {
            .make-control-line-hover(@brand-danger-lighter, @brand-danger-darkish);
        }

        &.info {
            .make-control-line-hover(@brand-info-lighter, @brand-info-darkish);
        }
    }
}

.controls-col {
    .controls {
        justify-content: flex-end;
    }
}
